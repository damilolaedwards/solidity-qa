package components

import "sort"
import "assistant/types"
import "fmt"

templ SuggestionButton(suggestion Suggestion) {
  <button
    onclick="askLLMAboutSuggestion(event)"
    class="p-4 bg-gray-800 rounded-md text-left hover:bg-gray-700 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
  >
    <h3 class="font-bold mb-1">{suggestion.Title}</h3>
    <p class="text-sm text-gray-400">{suggestion.Description}</p>
  </button>
}

templ Message(index int, message types.Message, errorMessages []int) {
  <div class={"flex mb-4", templ.KV("justify-end", message.Role == "user"), templ.KV("justify-start", message.Role != "user"), templ.KV("pl-3 border-l border-l-orange-400", message.Role != "user" && message.Model == "claude-3-5-sonnet-20240620"), templ.KV("pl-3 border-l border-l-green-400", message.Role != "user" && message.Model != "claude-3-5-sonnet-20240620")}>
    <div
        class={"rounded-lg text-white", templ.KV("bg-red-500 p-3", sort.SearchInts(errorMessages, index) < len(errorMessages) && errorMessages[sort.SearchInts(errorMessages, index)] == index), templ.KV("bg-blue-500 max-w-[min(100%,_30rem)] p-3", message.Role == "user"), templ.KV("bg-gray-700 max-w-[min(100%,_35rem)] px-3", message.Role != "user" && message.Type != "image")}
    >
      if message.Role == "user" {
        <div class="markdownContent">{message.Content}</div>
      } else {
        if message.Type == "image" {
          <img src={message.Content} alt="Image generated by LLM" width="500" height="500" />
        } else { 
          <div class="markdownContent unreset" title={fmt.Sprintf("This response was generated by %s", message.Model)}>{message.Content}</div>
        }
      }
    </div>
  </div>
}

templ ChatInterface(conversation []types.Message, suggestions []Suggestion, errorMessages []int) {
  <div class="flex-grow flex flex-col items-center justify-end p-4 overflow-auto">
    if len(conversation) == 0 {
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl w-full">
        for _, suggestion := range suggestions {
          @SuggestionButton(suggestion)
        }
      </div>
    } else {
      <div id="messageList" class="w-full max-w-4xl overflow-auto">
        for index, message := range conversation {
          @Message(index, message, errorMessages)
        }
      </div>
      <script type="module">
        let converter = new showdown.Converter({
          tables: true,
          tasklists: true,
          smartIndentationFix: true,
          simpleLineBreaks: true,
          openLinksInNewWindow: true,
          moreStyling: true,
        });

        document.querySelectorAll('.markdownContent').forEach((md) => {
          const markdownContent = md.innerText;
          const htmlContent = converter.makeHtml(markdownContent);
          md.innerHTML = htmlContent;
        });
      </script>
    }
    <div class="mt-8 w-full max-w-4xl">
      @PromptBox()
    </div>
  </div>
}