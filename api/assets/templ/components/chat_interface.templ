package components

import "sort"
import "assistant/types"
import "fmt"
import "strconv"

templ SuggestionButton(suggestion Suggestion) {
  <button
    onclick="askLLMAboutSuggestion(event)"
    class="p-4 bg-gray-800 rounded-md text-left hover:bg-gray-700 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
  >
    <h3 class="font-bold mb-1">{suggestion.Title}</h3>
    <p class="text-sm text-gray-400">{suggestion.Description}</p>
  </button>
}

templ Message(index int, message types.Message, errorMessages []int) {
  <div class={"message", templ.KV("user", message.Role == "user"), templ.KV("assistant", message.Role != "user"), templ.KV("!bg-red-500", message.Role == "user" && sort.SearchInts(errorMessages, index) < len(errorMessages) && errorMessages[sort.SearchInts(errorMessages, index)] == index), templ.KV("border-l border-l-orange-400", message.Role != "user" && message.Model == "Claude 3.5 Sonnet"), templ.KV("border-l border-l-green-400", message.Role != "user" && message.Model != "Claude 3.5 Sonnet")}>

    if message.Type == "image" {
      <img src={message.Content} alt="Image generated by LLM" width="500" height="500" />
    } else {
      <div
        data-message={message.Content} 
        id={"messageContent" + strconv.FormatInt(int64(index), 10)}
        class={"messageContent"}
        if message.Role == "assistant" {
          title={fmt.Sprintf("This response was generated by %s", message.Model)}
        }
      >{message.Content}</div>
    }

    if message.Role != "user" {
      <!-- Copy to Clipboard Button -->
      <button
        title="Copy to clipboard"
        class={"text-gray-200 rounded p-1 text-xs self-end"}
        data-message-id={"messageContent" + strconv.FormatInt(int64(index), 10)}
        onclick="copyToClipboard(this)"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>
      </button>
    }
  </div>
}

templ ChatInterface(conversation []types.Message, suggestions []Suggestion, errorMessages []int) {
  <div class="flex-grow flex flex-col items-center justify-end p-4 overflow-auto">
    if len(conversation) == 0 {
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl w-full">
        for _, suggestion := range suggestions {
          @SuggestionButton(suggestion)
        }
      </div>
    } else {
      <div id="messageList" class="chat-container">
        for index, message := range conversation {
          if !message.Hidden {
            @Message(index, message, errorMessages)
          }
        }
      </div>
      <script type="module">
         let converter = new showdown.Converter({
          tables: true,
          tasklists: true,
          smartIndentationFix: true,
          simpleLineBreaks: true,
          openLinksInNewWindow: true,
          moreStyling: true,
        });

        const renderMarkdown = async (md) => {
          return converter.makeHtml(md);
        }

        async function processMarkdownContent() {
          try {
            const markdownElements = document.querySelectorAll('.messageContent');

            const conversionPromises = Array.from(markdownElements).map(async (md) => {
              const markdownContent = md.getAttribute("data-message");

              if (markdownContent) {
                const htmlContent = await renderMarkdown(markdownContent);
                md.innerHTML = decodeURIComponent(htmlContent);
              }
            });

            await Promise.all(conversionPromises);
          } catch (error) {
            console.error("Error processing markdown content:", error);
          }
        }

        await processMarkdownContent();

        // Get the message list element
        const messageList = document.getElementById('messageList');

        // Get the last message element
        const lastMessage = messageList.lastElementChild;

        if (lastMessage) {
            // Scroll to the top of the last message
            lastMessage.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      </script>
    }
    <div class="mt-8 w-full max-w-4xl">
      @PromptBox()
    </div>
  </div>
}